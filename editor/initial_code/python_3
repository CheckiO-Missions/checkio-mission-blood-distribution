def distribute_blood(blood_avail, blood_needs):
    return {  'A': {'A': 30, 'B': 0,  'AB': 10, 'O': 0},
   'B': {'A': 0,  'B': 30, 'AB': 0,  'O': 0},
  'AB': {'A': 0,  'B': 0,  'AB': 30, 'O': 0},
   'O': {'A': 0,  'B': 5,  'AB': 5,  'O': 30} }

if __name__ == '__main__':
    #These are only used for self-checking and not necessary for auto-testing
    def verify(blood_avail, blood_needs, user_result):
        blood_types = ['A', 'B', 'AB', 'O']
        distribution = user_result

        for blood_type in blood_types:
            used_blood = sum(distribution[blood_type].values())
            if used_blood > blood_avail[blood_type]:
                return False

            for target_type in blood_types:
                if blood_type == 'A':
                    if target_type not in ['A', 'AB']:
                        if distribution[blood_type][target_type] > blood_needs[target_type]:
                            return False
                elif blood_type == 'B':
                    if target_type not in ['B', 'AB']:
                        if distribution[blood_type][target_type] > blood_needs[target_type]:
                            return False
                elif blood_type == 'AB':
                    if target_type != 'AB':
                        if distribution[blood_type][target_type] > blood_needs[target_type]:
                            return False
                elif blood_type == 'O':
                    if distribution[blood_type][target_type] > blood_needs[target_type]:
                        return False

        return True



    assert verify({'A': 120, 'B': 40, 'AB': 20, 'O': 90}, {'A': 150, 'B': 40, 'AB': 20, 'O': 60},
     distribute_blood({'A': 120, 'B': 40, 'AB': 20, 'O': 90},{'A': 150, 'B': 40, 'AB': 20, 'O': 60}))
     
    assert verify({'A': 120, 'B': 40, 'AB': 20, 'O': 90}, {'A': 150, 'B': 40, 'AB': 20, 'O': 60},
     distribute_blood({'A': 120, 'B': 40, 'AB': 20, 'O': 90},{'A': 150, 'B': 40, 'AB': 20, 'O': 60}))


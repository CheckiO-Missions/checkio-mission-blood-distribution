def distribute_blood(blood):
    return {  }

if __name__ == '__main__':
    #These are only used for self-checking and not necessary for auto-testing
    def check_solution(blood_avail, blood_needs, function):
        blood_types = ['A', 'B', 'AB', 'O']
        distribution = function(blood_avail, blood_needs)

        for blood_type in blood_types:
            used_blood = sum(distribution[blood_type].values())
            if used_blood > blood_avail[blood_type]:
                return False

            for target_type in blood_types:
                if blood_type == 'A':
                    if target_type not in ['A', 'AB']:
                        if distribution[blood_type][target_type] > blood_needs[target_type]:
                            return False
                elif blood_type == 'B':
                    if target_type not in ['B', 'AB']:
                        if distribution[blood_type][target_type] > blood_needs[target_type]:
                            return False
                elif blood_type == 'AB':
                    if target_type != 'AB':
                        if distribution[blood_type][target_type] > blood_needs[target_type]:
                            return False
                elif blood_type == 'O':
                    if distribution[blood_type][target_type] > blood_needs[target_type]:
                        return False

        return True



    assert check_solution({'A': 120, 'B': 40, 'AB': 20, 'O': 90}, {'A': 150, 'B': 40, 'AB': 20, 'O': 60},
     distribute_blood), "Threes and Sixes"
     
    assert check_solution({'A': 120, 'B': 40, 'AB': 20, 'O': 90}, {'A': 150, 'B': 40, 'AB': 20, 'O': 60},
     distribute_blood), "Threes and Sixes"

